clear
sad
print(paste("Hello", name, "you are", age, "years old."))
print(paste("Hello", name, "you are", age, "years old."))
name <- "Afiq"
age <- 22
print(paste("Hello", name, "you are", age, "years old."))
name <- "Afiq"
age <- 22
print(paste("Hello", name, "you are", age, "years old."))
students <- read.csv("students.csv")
students <- read.csv("students.csv")
print(students)
str(students)
summary(students)
high_scores <- students[students$Score > 80, ]
print(high_scores)
plot(students$Score, type = "b", col = "blue",
main = "Student Scores", xlab = "Student Index", ylab = "Score")
View(students)
install.packages("titanic")
install.packages("dplyr")
install.packages("ggplot2")
library(titanic)
library(dplyr)
library(ggplot2)
# Load the Titanic training dataset
data <- titanic_train
head(data)  # View first 6 rows
str(data)          # View structure of the dataset
summary(data)      # Quick statistics
colnames(data)     # Column names
library(titanic)
library(dplyr)
library(ggplot2)
# Load the Titanic training dataset
data <- titanic_train
head(data)  # View first 6 rows
str(data)          # View structure of the dataset
summary(data)      # Quick statistics
colnames(data)     # Column names
library(titanic)
library(dplyr)
library(ggplot2)
# Load the Titanic training dataset
data <- titanic_train
head(data)  # View first 6 rows
str(data)          # View structure of the dataset
summary(data)      # Quick statistics
colnames(data)     # Column names
library(titanic)
library(dplyr)
library(ggplot2)
# Load the Titanic training dataset
data <- titanic_train
head(data)  # View first 6 rows
str(data)          # View structure of the dataset
summary(data)      # Quick statistics
colnames(data)     # Column names
nrow(data)
table(data$Sex)
mean(data$Age, na.rm = TRUE)
table(data$Survived)
data %>%
group_by(Sex) %>%
summarise(Survived_Rate = mean(Survived, na.rm = TRUE))
library(titanic)
library(dplyr)
library(ggplot2)
# Load the Titanic training dataset
data <- titanic_train
ggplot(data, aes(x = Sex, fill = as.factor(Survived))) +
geom_bar(position = "dodge") +
labs(title = "Survival by Gender", x = "Gender", fill = "Survived")
ggplot(data, aes(x = Age)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Age Distribution of Passengers")
library(dplyr)
data_clean <- titanic_train %>%
filter(!is.na(Age))
library(titanic)
data <- titanic_train
# Count missing values by column
colSums(is.na(data))
library(titanic)
data <- titanic_train
# Count missing values by column
colSums(is.na(data))
library(titanic)
data <- titanic_train
# Count missing values by column
colSums(is.na(data))
any(is.na(data))
any(is.na(data))
#Total Missing data?
sum(is.na(data))
colSums(is.na(data))
# Count missing values by column
colSums(is.na(data))
#is there any missing data?
any(is.na(data))
#Total Missing data?
sum(is.na(data))
# Count missing values by column
colSums(is.na(data))
data[!complete.cases(data), ]
library(dplyr)
data_clean <- titanic_train %>%
filter(!is.na(Age))
any(is.na(data))
library(dplyr)
data_clean <- titanic_train %>%
filter(!is.na(Age))
any(is.na(data))
#filter missing data
library(dplyr)
data_clean <- titanic_train %>%
filter(!is.na(Age))
data_clean <- titanic_train %>%
filter(!is.na(Age))
data_clean <- data_clean %>%
mutate(AgeGroup = cut(
Age,
breaks = c(0, 12, 18, 30, 50, 80),
labels = c("Child", "Teen", "Young Adult", "Adult", "Senior")
))
library(dplyr)
data_clean <- titanic_train %>%
filter(!is.na(Age))
data_clean <- data_clean %>%
mutate(AgeGroup = cut(
Age,
breaks = c(0, 12, 18, 30, 50, 80),
labels = c("Child", "Teen", "Young Adult", "Adult", "Senior")
))
survival_summary <- data_clean %>%
group_by(Pclass, AgeGroup) %>%
summarise(SurvivalRate = mean(Survived), Count = n())
print(survival_summary)
library(dplyr)
data_clean <- titanic_train %>%
filter(!is.na(Age))
data_clean <- data_clean %>%
mutate(AgeGroup = cut(
Age,
breaks = c(0, 12, 18, 30, 50, 80),
labels = c("Child", "Teen", "Young Adult", "Adult", "Senior")
))
survival_summary <- data_clean %>%
group_by(Pclass, AgeGroup) %>%
summarise(SurvivalRate = mean(Survived), Count = n())
print(survival_summary)
library(ggplot2)
ggplot(survival_summary, aes(x = AgeGroup, y = SurvivalRate, fill = factor(Pclass))) +
geom_col(position = "dodge") +
labs(
title = "Survival Rate by Age Group and Passenger Class",
x = "Age Group",
y = "Survival Rate",
fill = "Passenger Class"
) +
theme_minimal()
#Check again if there is any missing data on the new dataset
any(is.na(data_clean))
library(titanic)
library(dplyr)
# Load data
data <- titanic_train
# Remove rows with missing values in relevant columns
data_clean <- data %>%
select(Survived, Sex, Age, Pclass) %>%
filter(complete.cases(.))
# Convert categorical variables to factors
data_clean$Survived <- as.factor(data_clean$Survived)
data_clean$Sex <- as.factor(data_clean$Sex)
data_clean$Pclass <- as.factor(data_clean$Pclass)
print(data_clean)
# Convert categorical variables to factors
data_clean$Survived <- as.factor(data_clean$Survived)
data_clean$Sex <- as.factor(data_clean$Sex)
data_clean$Pclass <- as.factor(data_clean$Pclass)
print(data_clean)
# Fit the model
model <- glm(Survived ~ Sex + Age + Pclass, data = data_clean, family = "binomial")
# View model summary
summary(model)
# Fit the model
model <- glm(Survived ~ Sex + Age + Pclass, data = data_clean, family = "binomial")
# View model summary
summary(model)
# Predict probabilities
predictions <- predict(model, type = "response")
# Convert to binary predictions (0 or 1) using 0.5 threshold
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# Convert to factor to match actual values
predicted_class <- as.factor(predicted_class)
# Confusion matrix
table(Predicted = predicted_class, Actual = data_clean$Survived)
# Accuracy
mean(predicted_class == data_clean$Survived)
# Confusion matrix
table(Predicted = predicted_class, Actual = data_clean$Survived)
# Accuracy
mean(predicted_class == data_clean$Survived)
install.packages("pROC")      # Only run this once
library(pROC)
# Predict probabilities, not class labels
predicted_probs <- predict(model, type = "response")
roc_curve <- roc(data_clean$Survived, predicted_probs)
plot(roc_curve, col = "blue", main = "ROC Curve for Titanic Survival Model")
auc(roc_curve)
install.packages("rpart")         # For decision tree model
install.packages("rpart.plot")    # To visualize the tree
library(rpart)
library(rpart.plot)
tree_model <- rpart(Survived ~ Sex + Age + Pclass, data = data_clean, method = "class")
View(tree_model)
rpart.plot(tree_model, type = 3, extra = 104, fallen.leaves = TRUE)
tree_pred <- predict(tree_model, type = "class")
confusion_matrix <- table(Predicted = tree_pred, Actual = data_clean$Survived)
print(confusion_matrix)
mean(tree_pred == data_clean$Survived)  # Accuracy
